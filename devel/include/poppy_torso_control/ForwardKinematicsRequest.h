// Generated by gencpp from file poppy_torso_control/ForwardKinematicsRequest.msg
// DO NOT EDIT!


#ifndef POPPY_TORSO_CONTROL_MESSAGE_FORWARDKINEMATICSREQUEST_H
#define POPPY_TORSO_CONTROL_MESSAGE_FORWARDKINEMATICSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poppy_torso_control
{
template <class ContainerAllocator>
struct ForwardKinematicsRequest_
{
  typedef ForwardKinematicsRequest_<ContainerAllocator> Type;

  ForwardKinematicsRequest_()
    : group()
    , joints()  {
    }
  ForwardKinematicsRequest_(const ContainerAllocator& _alloc)
    : group(_alloc)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ForwardKinematicsRequest_

typedef ::poppy_torso_control::ForwardKinematicsRequest_<std::allocator<void> > ForwardKinematicsRequest;

typedef boost::shared_ptr< ::poppy_torso_control::ForwardKinematicsRequest > ForwardKinematicsRequestPtr;
typedef boost::shared_ptr< ::poppy_torso_control::ForwardKinematicsRequest const> ForwardKinematicsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace poppy_torso_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'poppy_torso_control': ['/tf/user/ros/poppy_ws/src/poppy_ros/poppy_torso_control/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89e53c7d83a6da990d473520bde4d43f";
  }

  static const char* value(const ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89e53c7d83a6da99ULL;
  static const uint64_t static_value2 = 0x0d473520bde4d43fULL;
};

template<class ContainerAllocator>
struct DataType< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poppy_torso_control/ForwardKinematicsRequest";
  }

  static const char* value(const ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  group\n"
"float32[] joints\n"
;
  }

  static const char* value(const ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ForwardKinematicsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poppy_torso_control::ForwardKinematicsRequest_<ContainerAllocator>& v)
  {
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POPPY_TORSO_CONTROL_MESSAGE_FORWARDKINEMATICSREQUEST_H
