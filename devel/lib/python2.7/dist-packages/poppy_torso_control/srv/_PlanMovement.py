# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from poppy_torso_control/PlanMovementRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanMovementRequest(genpy.Message):
  _md5sum = "ba10917eee5925fa4fe634f7f6f5780b"
  _type = "poppy_torso_control/PlanMovementRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string          group
bool            rand_start
bool            current_start
float32[]       start_pos
bool            rand_target
float32[]       target_pos
bool            execute
bool            wait
bool            ret_plan
int8            ret_fps
"""
  __slots__ = ['group','rand_start','current_start','start_pos','rand_target','target_pos','execute','wait','ret_plan','ret_fps']
  _slot_types = ['string','bool','bool','float32[]','bool','float32[]','bool','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       group,rand_start,current_start,start_pos,rand_target,target_pos,execute,wait,ret_plan,ret_fps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanMovementRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.group is None:
        self.group = ''
      if self.rand_start is None:
        self.rand_start = False
      if self.current_start is None:
        self.current_start = False
      if self.start_pos is None:
        self.start_pos = []
      if self.rand_target is None:
        self.rand_target = False
      if self.target_pos is None:
        self.target_pos = []
      if self.execute is None:
        self.execute = False
      if self.wait is None:
        self.wait = False
      if self.ret_plan is None:
        self.ret_plan = False
      if self.ret_fps is None:
        self.ret_fps = 0
    else:
      self.group = ''
      self.rand_start = False
      self.current_start = False
      self.start_pos = []
      self.rand_target = False
      self.target_pos = []
      self.execute = False
      self.wait = False
      self.ret_plan = False
      self.ret_fps = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.rand_start, _x.current_start))
      length = len(self.start_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.start_pos))
      buff.write(_get_struct_B().pack(self.rand_target))
      length = len(self.target_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.target_pos))
      _x = self
      buff.write(_get_struct_3Bb().pack(_x.execute, _x.wait, _x.ret_plan, _x.ret_fps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group = str[start:end].decode('utf-8')
      else:
        self.group = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.rand_start, _x.current_start,) = _get_struct_2B().unpack(str[start:end])
      self.rand_start = bool(self.rand_start)
      self.current_start = bool(self.current_start)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.rand_target,) = _get_struct_B().unpack(str[start:end])
      self.rand_target = bool(self.rand_target)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.target_pos = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 4
      (_x.execute, _x.wait, _x.ret_plan, _x.ret_fps,) = _get_struct_3Bb().unpack(str[start:end])
      self.execute = bool(self.execute)
      self.wait = bool(self.wait)
      self.ret_plan = bool(self.ret_plan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.group
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.rand_start, _x.current_start))
      length = len(self.start_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.start_pos.tostring())
      buff.write(_get_struct_B().pack(self.rand_target))
      length = len(self.target_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.target_pos.tostring())
      _x = self
      buff.write(_get_struct_3Bb().pack(_x.execute, _x.wait, _x.ret_plan, _x.ret_fps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group = str[start:end].decode('utf-8')
      else:
        self.group = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.rand_start, _x.current_start,) = _get_struct_2B().unpack(str[start:end])
      self.rand_start = bool(self.rand_start)
      self.current_start = bool(self.current_start)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.rand_target,) = _get_struct_B().unpack(str[start:end])
      self.rand_target = bool(self.rand_target)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.target_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 4
      (_x.execute, _x.wait, _x.ret_plan, _x.ret_fps,) = _get_struct_3Bb().unpack(str[start:end])
      self.execute = bool(self.execute)
      self.wait = bool(self.wait)
      self.ret_plan = bool(self.ret_plan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bb = None
def _get_struct_3Bb():
    global _struct_3Bb
    if _struct_3Bb is None:
        _struct_3Bb = struct.Struct("<3Bb")
    return _struct_3Bb
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from poppy_torso_control/PlanMovementResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import poppy_torso_control.msg

class PlanMovementResponse(genpy.Message):
  _md5sum = "5b54ca3a6fee8d419981a188e02f0dd9"
  _type = "poppy_torso_control/PlanMovementResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8            error
float32[]       start_pos
float32[]       target_pos
Trajectory[]    plans

================================================================================
MSG: poppy_torso_control/Trajectory
# This message stores a movement
#
# * joint: name of the joint
#
# * trajectory: array of positions
#

string      joint
float32[]   trajectory"""
  __slots__ = ['error','start_pos','target_pos','plans']
  _slot_types = ['int8','float32[]','float32[]','poppy_torso_control/Trajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,start_pos,target_pos,plans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanMovementResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = 0
      if self.start_pos is None:
        self.start_pos = []
      if self.target_pos is None:
        self.target_pos = []
      if self.plans is None:
        self.plans = []
    else:
      self.error = 0
      self.start_pos = []
      self.target_pos = []
      self.plans = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_b().pack(self.error))
      length = len(self.start_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.start_pos))
      length = len(self.target_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.target_pos))
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        _x = val1.joint
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.trajectory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      start = end
      end += 1
      (self.error,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.target_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = poppy_torso_control.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint = str[start:end].decode('utf-8')
        else:
          val1.joint = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.trajectory = struct.unpack(pattern, str[start:end])
        self.plans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_b().pack(self.error))
      length = len(self.start_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.start_pos.tostring())
      length = len(self.target_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.target_pos.tostring())
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        _x = val1.joint
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.trajectory.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      start = end
      end += 1
      (self.error,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.target_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = poppy_torso_control.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint = str[start:end].decode('utf-8')
        else:
          val1.joint = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.trajectory = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.plans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class PlanMovement(object):
  _type          = 'poppy_torso_control/PlanMovement'
  _md5sum = '739716dc3ed3bb73b035e54b77eee141'
  _request_class  = PlanMovementRequest
  _response_class = PlanMovementResponse
